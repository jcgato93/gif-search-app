{"version":3,"sources":["components/AddCategory.js","components/GiftGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GiftGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifts","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SATW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,UACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdlB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,UAcnB,wBAAQD,KAAK,SAAb,8BCJOI,EAdM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAQC,EAAW,EAAXA,IAC5B,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QARvB,kBAWZY,GAXY,4CAAH,sDC2BLM,EAtBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SACjB,ECH0B,SAACA,GAC3B,MAA0BpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACd,IAEGe,EDZ2BK,CAAapB,GAAjCW,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKd,IACJc,GACC,mBAAGlB,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACKe,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAA2Bf,MAAOe,EAAIf,MAAOC,IAAKc,EAAId,KAAnCc,EAAIC,aEYpBW,EAxBM,SAACC,GACpB,MAAoC1C,mBAAS,CAAC,YAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI4C,EAAWf,KAAI,SAACR,GAAD,OACb,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCVnBwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9947b7b7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n        setCategories((cats) => [inputValue, ...cats]);\r\n        setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (    \r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n        <button type=\"submit\">Add Category</button>\r\n      </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GiftGridItem = ({ title,  url  }) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown'>            \r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGiftGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GiftGridItem;\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FgnQWw7sz7qXcvQl8SLk7ir2j70IIHQ7`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifts = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });        \r\n    return gifts;\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GiftGridItem from \"./GiftGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loading...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n          {images.map((img) => (\r\n            <GiftGridItem key={img.id} title={img.title} url={img.url} />\r\n          ))}        \r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs }  from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });  \r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = (props) => {\r\n  const [categories, setCategories] = useState([\"Pokemon\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpert</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map((category) => (\r\n            <GifGrid \r\n              key={category}\r\n              category={category} \r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nGifExpertApp.propTypes = {};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}